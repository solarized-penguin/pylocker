"""create get_lo_size

Revision ID: c9df46c49427
Revises: 56338f79a0ae
Create Date: 2020-12-22 18:14:10.401603

"""
from alembic import op
from alembic_utils.pg_function import PGFunction

# revision identifiers, used by Alembic.
revision = 'c9df46c49427'
down_revision = '56338f79a0ae'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    public_get_lo_size = PGFunction(
        schema="public",
        signature="get_lo_size(loid INTEGER)",
        definition='RETURNS BIGINT AS $lo_size$\n    DECLARE\n        file_descriptor INTEGER;\n        file_size BIGINT;\n    BEGIN\n        -- Open large object for reading.\n        -- Parameter "x\'40000\'" is equivalent to postgres large object mode "INV_READ"\n        -- which is necessary for method to work\n        file_descriptor := lo_open(CAST(loid AS OID), x\'40000\' :: INT);\n    \n        -- Seek to the end\n        -- "Seek" command = "2"\n        PERFORM lo_lseek64(file_descriptor, 0, 2);\n    \n        -- Fetch current file position - location of the last byte\n        file_size := lo_tell64(file_descriptor);\n    \n        -- Close open file.\n        PERFORM lo_close(file_descriptor);\n    \n        RETURN file_size;\n    END;\n    $lo_size$\n    LANGUAGE plpgsql;'
    )

    op.create_entity(public_get_lo_size)
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    public_get_lo_size = PGFunction(
        schema="public",
        signature="get_lo_size(loid INTEGER)",
        definition='RETURNS BIGINT AS $lo_size$\n    DECLARE\n        file_descriptor INTEGER;\n        file_size BIGINT;\n    BEGIN\n        -- Open large object for reading.\n        -- Parameter "x\'40000\'" is equivalent to postgres large object mode "INV_READ"\n        -- which is necessary for method to work\n        file_descriptor := lo_open(CAST(loid AS OID), x\'40000\' :: INT);\n    \n        -- Seek to the end\n        -- "Seek" command = "2"\n        PERFORM lo_lseek64(file_descriptor, 0, 2);\n    \n        -- Fetch current file position - location of the last byte\n        file_size := lo_tell64(file_descriptor);\n    \n        -- Close open file.\n        PERFORM lo_close(file_descriptor);\n    \n        RETURN file_size;\n    END;\n    $lo_size$\n    LANGUAGE plpgsql;'
    )

    op.drop_entity(public_get_lo_size)
    # ### end Alembic commands ###
